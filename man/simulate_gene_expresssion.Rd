% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_expression.R
\name{simulate_gene_expresssion}
\alias{simulate_gene_expresssion}
\title{Simulate gene expression}
\usage{
simulate_gene_expresssion(x, n, p, z = 0, dist.cells = list(dist =
  stats::rnbinom, size = 3, mu = 5), markers = NULL, mfold = 2,
  CLnames = NULL, genes = NULL, dist.noise.sources = list(dist =
  stats::rnorm, mean = 0, sd = 0.05), alpha = 1,
  dist.noise.global = list(dist = stats::rgamma, shape = 5, scale = 1),
  perturb = .pos.gaussian, pargs = list(p = p, mean = 0.5, sd = 0.2, lwr =
  0, upr = 1))
}
\arguments{
\item{x}{number of cell types}

\item{n}{number of genes}

\item{p}{number of samples}

\item{z}{number of perturbators}

\item{dist.cells}{distribution and parameters from which cell profiles will
be drawn}

\item{markers}{number of markers that will distinguish cell types, can be a
number (the same number of marker genes for cell types and perturbator), can
be a vector of length x+z, it will be set to ceiling(n/20) if not provided}

\item{mfold}{number of fold change between gene markers and other genes}

\item{CLnames}{column names (cell and perturbator)}

\item{genes}{gene names}

\item{dist.noise.sources}{noise that will be added to each column of basis matrix (to each source)}

\item{alpha}{parameter for the dirichlet distribution from which are drawn the cell proportions, using rdirichlet.}

\item{dist.noise.global}{distribution and parameters of global noise (added to each sample one mixture is obtained)}

\item{perturb}{function of distribution}

\item{pargs}{arguments of perturbation function}
}
\value{
\describe{
\item{expression}{mixed expression matrix}
\item{marker.genes}{list of marker genes per cell type}
\item{basis_matrix}{pure cell type and perturbator profile}
\item{prop}{pure cell type and perturbator proportions (from 0 to 1)}
}
}
\description{
Function simulating gene expression of mixed cell types with a perturbator (i.e. proliferation, stress)
}
\examples{
res <- simulate_gene_expresssion (3, 100, 100, 2 , markers = c(4,5,5,3,4))
#visualise the basis matrix
pheatmap::pheatmap(res$basis_matrix)
#visualize expression
pheatmap::pheatmap(res$expression)
#observe distribution of signals
par(mfrow=c(2,2))
apply(res$basis_matrix, 2, hist)
}
